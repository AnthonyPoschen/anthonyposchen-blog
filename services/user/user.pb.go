// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

/*
Package user is a generated protocol buffer package.

It is generated from these files:
	user.proto

It has these top-level messages:
	LogInReq
	LogInRes
	AuthedReq
	AuthedRes
	ChangePasswordReq
	ChangePasswordRes
	RefreshTokenReq
	RefreshTokenRes
	User
*/
package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LogInReq struct {
	Username     string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password     string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	KeepLoggedIn bool   `protobuf:"varint,3,opt,name=keepLoggedIn" json:"keepLoggedIn,omitempty"`
}

func (m *LogInReq) Reset()                    { *m = LogInReq{} }
func (m *LogInReq) String() string            { return proto.CompactTextString(m) }
func (*LogInReq) ProtoMessage()               {}
func (*LogInReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LogInReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LogInReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *LogInReq) GetKeepLoggedIn() bool {
	if m != nil {
		return m.KeepLoggedIn
	}
	return false
}

type LogInRes struct {
	User  *User  `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Ok    bool   `protobuf:"varint,2,opt,name=ok" json:"ok,omitempty"`
	Error string `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *LogInRes) Reset()                    { *m = LogInRes{} }
func (m *LogInRes) String() string            { return proto.CompactTextString(m) }
func (*LogInRes) ProtoMessage()               {}
func (*LogInRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LogInRes) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *LogInRes) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *LogInRes) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type AuthedReq struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *AuthedReq) Reset()                    { *m = AuthedReq{} }
func (m *AuthedReq) String() string            { return proto.CompactTextString(m) }
func (*AuthedReq) ProtoMessage()               {}
func (*AuthedReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AuthedReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type AuthedRes struct {
	User  *User  `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Ok    bool   `protobuf:"varint,2,opt,name=ok" json:"ok,omitempty"`
	Error string `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *AuthedRes) Reset()                    { *m = AuthedRes{} }
func (m *AuthedRes) String() string            { return proto.CompactTextString(m) }
func (*AuthedRes) ProtoMessage()               {}
func (*AuthedRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AuthedRes) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *AuthedRes) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *AuthedRes) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ChangePasswordReq struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	OldPassword string `protobuf:"bytes,2,opt,name=oldPassword" json:"oldPassword,omitempty"`
	NewPassword string `protobuf:"bytes,3,opt,name=newPassword" json:"newPassword,omitempty"`
	Token       string `protobuf:"bytes,4,opt,name=token" json:"token,omitempty"`
}

func (m *ChangePasswordReq) Reset()                    { *m = ChangePasswordReq{} }
func (m *ChangePasswordReq) String() string            { return proto.CompactTextString(m) }
func (*ChangePasswordReq) ProtoMessage()               {}
func (*ChangePasswordReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ChangePasswordReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ChangePasswordReq) GetOldPassword() string {
	if m != nil {
		return m.OldPassword
	}
	return ""
}

func (m *ChangePasswordReq) GetNewPassword() string {
	if m != nil {
		return m.NewPassword
	}
	return ""
}

func (m *ChangePasswordReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ChangePasswordRes struct {
	Ok    bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *ChangePasswordRes) Reset()                    { *m = ChangePasswordRes{} }
func (m *ChangePasswordRes) String() string            { return proto.CompactTextString(m) }
func (*ChangePasswordRes) ProtoMessage()               {}
func (*ChangePasswordRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ChangePasswordRes) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ChangePasswordRes) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type RefreshTokenReq struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *RefreshTokenReq) Reset()                    { *m = RefreshTokenReq{} }
func (m *RefreshTokenReq) String() string            { return proto.CompactTextString(m) }
func (*RefreshTokenReq) ProtoMessage()               {}
func (*RefreshTokenReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RefreshTokenReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type RefreshTokenRes struct {
	User  *User  `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Ok    bool   `protobuf:"varint,2,opt,name=ok" json:"ok,omitempty"`
	Error string `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *RefreshTokenRes) Reset()                    { *m = RefreshTokenRes{} }
func (m *RefreshTokenRes) String() string            { return proto.CompactTextString(m) }
func (*RefreshTokenRes) ProtoMessage()               {}
func (*RefreshTokenRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RefreshTokenRes) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *RefreshTokenRes) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *RefreshTokenRes) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type User struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	Token    string `protobuf:"bytes,4,opt,name=token" json:"token,omitempty"`
	Remember bool   `protobuf:"varint,5,opt,name=remember" json:"remember,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *User) GetRemember() bool {
	if m != nil {
		return m.Remember
	}
	return false
}

func init() {
	proto.RegisterType((*LogInReq)(nil), "user.LogInReq")
	proto.RegisterType((*LogInRes)(nil), "user.LogInRes")
	proto.RegisterType((*AuthedReq)(nil), "user.AuthedReq")
	proto.RegisterType((*AuthedRes)(nil), "user.AuthedRes")
	proto.RegisterType((*ChangePasswordReq)(nil), "user.ChangePasswordReq")
	proto.RegisterType((*ChangePasswordRes)(nil), "user.ChangePasswordRes")
	proto.RegisterType((*RefreshTokenReq)(nil), "user.RefreshTokenReq")
	proto.RegisterType((*RefreshTokenRes)(nil), "user.RefreshTokenRes")
	proto.RegisterType((*User)(nil), "user.user")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserService service

type UserServiceClient interface {
	LogIn(ctx context.Context, in *LogInReq, opts ...grpc.CallOption) (*LogInRes, error)
	Authed(ctx context.Context, in *AuthedReq, opts ...grpc.CallOption) (*AuthedRes, error)
	ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordRes, error)
	RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*RefreshTokenRes, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) LogIn(ctx context.Context, in *LogInReq, opts ...grpc.CallOption) (*LogInRes, error) {
	out := new(LogInRes)
	err := grpc.Invoke(ctx, "/user.UserService/LogIn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Authed(ctx context.Context, in *AuthedReq, opts ...grpc.CallOption) (*AuthedRes, error) {
	out := new(AuthedRes)
	err := grpc.Invoke(ctx, "/user.UserService/Authed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordRes, error) {
	out := new(ChangePasswordRes)
	err := grpc.Invoke(ctx, "/user.UserService/ChangePassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*RefreshTokenRes, error) {
	out := new(RefreshTokenRes)
	err := grpc.Invoke(ctx, "/user.UserService/RefreshToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceServer interface {
	LogIn(context.Context, *LogInReq) (*LogInRes, error)
	Authed(context.Context, *AuthedReq) (*AuthedRes, error)
	ChangePassword(context.Context, *ChangePasswordReq) (*ChangePasswordRes, error)
	RefreshToken(context.Context, *RefreshTokenReq) (*RefreshTokenRes, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_LogIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogInReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LogIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/LogIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LogIn(ctx, req.(*LogInReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Authed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Authed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/Authed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Authed(ctx, req.(*AuthedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangePassword(ctx, req.(*ChangePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RefreshToken(ctx, req.(*RefreshTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogIn",
			Handler:    _UserService_LogIn_Handler,
		},
		{
			MethodName: "Authed",
			Handler:    _UserService_Authed_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _UserService_ChangePassword_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _UserService_RefreshToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

func init() { proto.RegisterFile("user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0xa5, 0x85, 0x92, 0x32, 0x90, 0x12, 0x37, 0x18, 0x9b, 0x1e, 0x0c, 0xf6, 0x22, 0x26, 0x86,
	0x03, 0x9e, 0xbc, 0x98, 0x18, 0xbd, 0x90, 0x70, 0xc0, 0x55, 0xe3, 0x19, 0xec, 0x50, 0x48, 0xa5,
	0x8b, 0xbb, 0x20, 0x27, 0x13, 0x3f, 0xd8, 0x8f, 0x30, 0xbb, 0x5b, 0x4a, 0x5b, 0xc0, 0x13, 0x17,
	0xc2, 0xbc, 0x79, 0xdd, 0xf7, 0x66, 0xf6, 0x2d, 0xc0, 0x4a, 0x20, 0xef, 0x2e, 0x38, 0x5b, 0x32,
	0x52, 0x91, 0xff, 0xfd, 0x09, 0xd8, 0x03, 0x16, 0xf6, 0x63, 0x8a, 0x9f, 0xc4, 0x03, 0x5b, 0x62,
	0xf1, 0x68, 0x8e, 0xae, 0xd1, 0x36, 0x3a, 0x35, 0x9a, 0xd6, 0xb2, 0xb7, 0x18, 0x09, 0xb1, 0x66,
	0x3c, 0x70, 0x4d, 0xdd, 0xdb, 0xd4, 0xc4, 0x87, 0x46, 0x84, 0xb8, 0x18, 0xb0, 0x30, 0xc4, 0xa0,
	0x1f, 0xbb, 0xe5, 0xb6, 0xd1, 0xb1, 0x69, 0x0e, 0xf3, 0x87, 0xa9, 0x8e, 0x20, 0xe7, 0xa0, 0xb4,
	0x95, 0x46, 0xbd, 0x07, 0x5d, 0x65, 0x4a, 0xfe, 0x50, 0x85, 0x13, 0x07, 0x4c, 0x16, 0x29, 0x15,
	0x9b, 0x9a, 0x2c, 0x22, 0x2d, 0xb0, 0x90, 0x73, 0xc6, 0xd5, 0xc1, 0x35, 0xaa, 0x0b, 0xff, 0x02,
	0x6a, 0xf7, 0xab, 0xe5, 0x14, 0x03, 0x69, 0xbd, 0x05, 0xd6, 0x92, 0x45, 0x18, 0x27, 0xbe, 0x75,
	0xe1, 0x3f, 0x6d, 0x29, 0xc7, 0x52, 0xfd, 0x86, 0x93, 0x87, 0xe9, 0x28, 0x0e, 0x71, 0x98, 0x4c,
	0x2f, 0xd5, 0x1d, 0x30, 0x67, 0x41, 0x22, 0x6d, 0xce, 0x02, 0xd2, 0x86, 0x3a, 0xfb, 0x08, 0x86,
	0xf9, 0x7d, 0x65, 0x21, 0xc9, 0x88, 0x71, 0x9d, 0x32, 0xb4, 0x44, 0x16, 0xda, 0x4e, 0x54, 0xc9,
	0x4e, 0x74, 0xbb, 0x2b, 0x2f, 0x12, 0xe7, 0xc6, 0xae, 0x73, 0x33, 0xeb, 0xfc, 0x12, 0x9a, 0x14,
	0x27, 0x1c, 0xc5, 0xf4, 0x45, 0x1e, 0x75, 0x78, 0x6b, 0x6f, 0x45, 0xe2, 0xb1, 0x76, 0xf7, 0x63,
	0x40, 0x4a, 0xcf, 0xed, 0x2b, 0x1b, 0x3c, 0xf3, 0x9f, 0xe0, 0x95, 0x0b, 0xc1, 0xdb, 0xbb, 0x23,
	0xf9, 0x05, 0xc7, 0x39, 0xce, 0xc7, 0xc8, 0x5d, 0x4b, 0x59, 0x4a, 0xeb, 0xde, 0xaf, 0x01, 0xf5,
	0x57, 0x81, 0xfc, 0x19, 0xf9, 0xd7, 0xec, 0x1d, 0xc9, 0x15, 0x58, 0x2a, 0x96, 0xc4, 0xd1, 0x33,
	0x6d, 0xde, 0x82, 0x97, 0xaf, 0x85, 0x5f, 0x22, 0xd7, 0x50, 0xd5, 0x61, 0x22, 0x4d, 0xdd, 0x4b,
	0xd3, 0xe7, 0x15, 0x00, 0xc9, 0x7e, 0x04, 0x27, 0x7f, 0x51, 0xe4, 0x4c, 0x93, 0x76, 0xd2, 0xe3,
	0x1d, 0x68, 0xc8, 0x53, 0xee, 0xa0, 0x91, 0xbd, 0x0a, 0x72, 0xaa, 0xa9, 0x85, 0x7b, 0xf4, 0xf6,
	0xc2, 0xc2, 0x2f, 0x8d, 0xab, 0xea, 0xa9, 0xdf, 0xfc, 0x05, 0x00, 0x00, 0xff, 0xff, 0x52, 0x2b,
	0x7d, 0x6a, 0xf8, 0x03, 0x00, 0x00,
}
